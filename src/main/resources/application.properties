#Actuator:
#The actuator mainly exposes operational information about the running application
#\ health, metrics, info, dump, env, etc. 
#It uses HTTP endpoints or JMX beans to enable us to interact with it.
management.endpoints.web.exposure.include=*
#set access to content of info
management.info.env.enabled=true
management.info.build.enabled=true
management.info.git.enabled=true
management.info.java.enabled=true
management.info.os.enabled=true
#custom the env from info
info.application.name = Mycoolapp
info.application.description= A demo Spring project with information
info.java-version = ${java.version}
info.java-vendor = ${java.vendor}



security.basic.enabled=false



#define custom properties (injecting custom Application properties)
coach.name=Mike
team.name=The Mouse

#change the server port and other path(localhost:8081/mycoolapp)
server.port=8081
server.servlet.context-path=/mycoolapp
#spring Data REST properties
spring.data.rest.base-path=/api
spring.data.rest.defult-page-size=20


#no beans are created until they're explicitly needed
#spring.main.lazy-initialization=true

#Configure MySQL Using Spring Boot Properties
spring.datasource.url=jdbc:mysql://localhost:3306/userType_mycoolapp
spring.datasource.username=mycoolapp
spring.datasource.password=180926abcABC,


## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

#set logging level 
logging.level.org.springframework.web= debug
logging.level.org.hibernate= error
spring.main.banner-mode=off
logging.level.root=warn

logginglevel.org.springframework.security=DEBUG


